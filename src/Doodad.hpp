#ifndef DOODAD_H
#define DOODAD_H

#include <set>
#include <glm/glm.hpp>
#include <GL/glew.h>
#include <boost/tokenizer.hpp>
#include <sstream>
#include <iomanip>
#include "SceneGraph.hpp"
#include "Texture.hpp"
#include "Shader.hpp"
#include "Util.hpp"

static const char * ddVertPath = "shader/doodad.vert";
static const char * ddFragPath = "shader/doodad.frag";

enum class DoodadMount
{
  center = 0, topRight = 1, topLeft = 2, bottomRight = 3, bottomLeft = 4
};

class Segment : public Drawable
{
public:
  void draw();
  static std::shared_ptr<Segment> getSegment(float length, float topScale,
                                             float bottomScale,
                                             float topLength,
                                             float bottomLength,
                                             std::shared_ptr<Shader> inShader);
  std::shared_ptr<Shader> shader;
  glm::mat4 getMountPoint(DoodadMount where);
  static void clearMemo()
  {
    memo = std::map<std::string, std::shared_ptr<Segment> >();
  }
private:
  Segment(float length, float topScale, float bottomScale,
          float topLength, float bottomLength,
          std::shared_ptr<Shader> inShader);
  static std::map<std::string, std::shared_ptr<Segment> > memo;
  CubeMap tex;
  GLuint VAO;
  GLuint VBO;
  GLuint EBO;

  size_t indices;

  glm::vec3 center;
  glm::vec3 topLeft;
  glm::vec3 topRight;
  glm::vec3 bottomLeft;
  glm::vec3 bottomRight;

  glm::vec3 centerNorm;
  glm::vec3 topLeftNorm;
  glm::vec3 topRightNorm;
  glm::vec3 bottomLeftNorm;
  glm::vec3 bottomRightNorm;
};

class Doodad : public Group
{ // a Doodad is a thing that can be generated by L-systems
public:

  Doodad(float length, float topScale, float bottomScale,
         float topLength, float bottomLength,
         std::shared_ptr<Shader> inShader);

  virtual void insert(std::shared_ptr<Node> what)
  {insert(what, DoodadMount::center);}

  virtual void insert(std::shared_ptr<Node> what,
                      DoodadMount where,
                      std::function<void(glm::mat4 &, double)> uFn = doNothing);

  virtual void getLights(const glm::mat4 & inM,
                         std::vector<std::pair<std::shared_ptr<Light>,
                                               glm::mat4> > & vec) const;

  virtual void getCameras(const glm::mat4 & inM,
                          std::vector<std::pair<std::shared_ptr<Camera>,
                                                glm::mat4> > & vec) const;

  virtual void getDrawables(const glm::mat4 & inM,
                            std::vector<std::pair<std::shared_ptr<Drawable>,
                                                  glm::mat4> > & vec) const;

  virtual void update(double time);

private:
  std::shared_ptr<Segment> model;
  std::shared_ptr<Transform> center;
  std::shared_ptr<Transform> topRight;
  std::shared_ptr<Transform> topLeft;
  std::shared_ptr<Transform> bottomRight;
  std::shared_ptr<Transform> bottomLeft;

};

typedef struct _Grammar
{
  char ctor;
  std::vector<float> args;
  std::shared_ptr<struct _Grammar> lhs;
  std::shared_ptr<struct _Grammar> rhs;
} Grammar;

std::shared_ptr<Grammar> parse(std::string str);
std::string toString(std::shared_ptr<Grammar> g);
std::shared_ptr<Grammar> iterate(size_t n, std::shared_ptr<Grammar> g);
std::shared_ptr<Group> eval(std::shared_ptr<Grammar> g,
                            int seed,
                            std::shared_ptr<Shader> shader);

/*
  V = { D(len, topScale, bottomScale, topLen, bottomLen), -- Doodad
        C(len, topScale, bottomScale, topLen, bottomLen), -- Doodad(center only)
        S(scale), -- scepter
        T(minSegs) } -- angryTentacle
  S = { F(theta), -- fanout in 3 directions
        K(theta), -- fork in 2 directions
        A(r, s) -- for all directions produced by r, do subrule s }
  ω = { A(C(6,1,1,1,1), D(1.0f, 3.0f, 2.5f, 0.5f, 1.0f)) }
  ω = { A(C(6,1,1,1,1), A(F(1), S(1))) }
  ω = { A(S(1), A(K(1), T(3)) }

 */

std::shared_ptr<Transform> scepter(int seed,
                                   float scaleFactor,
                                   std::shared_ptr<Shader> shader,
                                   std::shared_ptr<Transform> & p1,
                                   std::shared_ptr<Transform> & p2,
                                   std::shared_ptr<Transform> & p3,
                                   std::shared_ptr<Transform> & p4);

std::shared_ptr<Doodad> angryTentacle(int seed,
                                      size_t minSegs,
                                      std::shared_ptr<Shader> shader,
                                      std::shared_ptr<Doodad> & p1);

std::shared_ptr<Group> fanout(int seed,
                              float theta,
                              std::shared_ptr<Transform> & p1,
                              std::shared_ptr<Transform> & p2,
                              std::shared_ptr<Transform> & p3);

std::shared_ptr<Group> fork(int seed,
                            float theta,
                            std::shared_ptr<Transform> & l,
                            std::shared_ptr<Transform> & r);

std::string baseOne();
std::string baseTwo();
std::string baseThree();
#endif
